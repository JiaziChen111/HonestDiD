sensitivityPlot = createSensitivityPlot(robustResults = robustResults, OLSresults = OLSresults)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=55))
oldoptions <- options(digits=3)
# Specify vector of M values
mVec = seq(from = 0, to = 0.5, length = 5)
# Loop over M values and construct the robust confidence set at each value
library(foreach)
robustResults = foreach(m = 1:length(mVec), .combine = 'rbind') %do% {
FLCI = findOptimalFLCI(sigma = LWdata$sigma, M = mVec[m],
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods)
tibble(lb = t(FLCI$optimalVec) %*% LWdata$betahat - FLCI$optimalHalfLength,
ub = t(FLCI$optimalVec) %*% LWdata$betahat + FLCI$optimalHalfLength,
method = "FLCI",
M = mVec[m])
}
# Construct OLS dataframe
OLSresults = tibble(lb = LWdata$betahat[numPrePeriods+1] - qnorm(0.95)*LWdata$stdErrors[numPrePeriods+1],
ub = LWdata$betahat[numPrePeriods+1] + qnorm(0.95)*LWdata$stdErrors[numPrePeriods+1],
method = "OLS",
M = 0)
sensitivityPlot = createSensitivityPlot(robustResults = robustResults, OLSresults = OLSresults)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=55))
oldoptions <- options(digits=3)
sensitivityPlot = createSensitivityPlot(robustResults = robustResults, OLSresults = OLSresults)
sensitivityPlot
# Specify vector of M values
mVec = seq(from = 0, to = 0.1, length = 5)
# Loop over M values and construct the robust confidence set at each value
library(foreach)
robustResults = foreach(m = 1:length(mVec), .combine = 'rbind') %do% {
FLCI = findOptimalFLCI(sigma = LWdata$sigma, M = mVec[m],
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods)
tibble(lb = t(FLCI$optimalVec) %*% LWdata$betahat - FLCI$optimalHalfLength,
ub = t(FLCI$optimalVec) %*% LWdata$betahat + FLCI$optimalHalfLength,
method = "FLCI",
M = mVec[m])
}
# Construct OLS dataframe
OLSresults = tibble(lb = LWdata$betahat[numPrePeriods+1] - qnorm(0.95)*LWdata$stdErrors[numPrePeriods+1],
ub = LWdata$betahat[numPrePeriods+1] + qnorm(0.95)*LWdata$stdErrors[numPrePeriods+1],
method = "OLS",
M = 0)
sensitivityPlot = createSensitivityPlot(robustResults = robustResults, OLSresults = OLSresults)
sensitivityPlot
library(HonestDiD)
library('tidyverse')
library('here')
employmentFemale.resultsObject = readRDS(here("Inputs/LovenheimWillen-replication/LovenheimWillen-EmploymentFemale_RefPeriodMinusOne.rds"))
employmentFemale.resultsObject$paper = NULL
employmentFemale.resultsObject$paper_formatted = NULL
employmentFemale.resultsObject$notes = NULL
employmentFemale.resultsObject$figure = NULL
names(employmentFemale.resultsObject)[1] = "betahat"
names(employmentFemale.resultsObject)[3] = "timeVec"
names(employmentFemale.resultsObject)[7] = "stdErrors"
LWdata = employmentFemale.resultsObject
save(LWdata, file = "~/Desktop/LWdata_EventStudy.rda")
employmentFemale.resultsObject <- readRDS("~/Dropbox/HonestParallelTrends/Inputs/LovenheimWillen-replication/LovenheimWillen-EmploymentFemale_RefPeriodMinusOne.rds")
employmentFemale.resultsObject$paper = NULL
employmentFemale.resultsObject$paper_formatted = NULL
employmentFemale.resultsObject$notes = NULL
employmentFemale.resultsObject$figure = NULL
names(employmentFemale.resultsObject)[1] = "betahat"
names(employmentFemale.resultsObject)[3] = "timeVec"
names(employmentFemale.resultsObject)[7] = "stdErrors"
LWdata = employmentFemale.resultsObject
save(LWdata, file = "~/Desktop/LWdata_EventStudy.rda")
library(HonestDiD)
LWdata
LWdata_EventStudy
?LWdata_EventStudy
library(HonestDiD)
LWdata
load("~/Dropbox/HonestParallelTrends/HonestDiD/data/LWdata_EventStudy.rda")
LWdata_EventStudy
employmentFemale.resultsObject <- readRDS("~/Dropbox/HonestParallelTrends/Inputs/LovenheimWillen-replication/LovenheimWillen-EmploymentFemale_RefPeriodMinusOne.rds")
employmentFemale.resultsObject$paper = NULL
employmentFemale.resultsObject$paper_formatted = NULL
employmentFemale.resultsObject$notes = NULL
employmentFemale.resultsObject$figure = NULL
names(employmentFemale.resultsObject)[1] = "betahat"
names(employmentFemale.resultsObject)[3] = "timeVec"
names(employmentFemale.resultsObject)[7] = "stdErrors"
LWdata_EventStudy = employmentFemale.resultsObject
save(LWdata_EventStudy, file = "~/Desktop/LWdata_EventStudy.rda")
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
# Load in LWdata_RawData.dta
LWdata_RawData = haven::read_dta(system.file("extdata", "LWdata_RawData.dta"), package = "HonestDiD")
# Load in LWdata_RawData.dta
LWdata_RawData = haven::read_dta(system.file("extdata", "LWdata_RawData.dta", package = "HonestDiD"))
# Estimate event study using lfe package
EmploymentFemale.EventStudy = lfe::felm(emp ~ rtESV13 + rtESV14 + rtESV15 + rtESV16 + rtESV17 +
rtESV18 + rtESV19 + rtESV110 + rtESV111 + # End Pre-periods
rtESV113 + rtESV114 + rtESV115 + rtESV116 + rtESV117 +
rtESV118 + rtESV119 + rtESV120 + rtESV121 + rtESV122 +
rtESV123 + rtESV124 + rtESV125 + rtESV126 + rtESV127 +
rtESV128 + rtESV129 + rtESV130 + rtESV131 + rtESV132 +
rtESV133 + rtESV134 + rtESV135 + # End post-periods
yearsfcor + yearsflr + aveitc + fscontrol + asian + black + hispanic + other |
factor(PUS_SURVEY_YEAR)*factor(BIRTHYEAR) + factor(PUS_SURVEY_YEAR) + factor(BIRTHSTATE) | 0 | BIRTHSTATE,
data = LWfemales.dta,
weights = LWfemales.dta$nobs)
# Load in LWdata_RawData.dta
LWdata_RawData = haven::read_dta(system.file("extdata", "LWdata_RawData.dta", package = "HonestDiD"))
# Estimate event study using lfe package
EmploymentFemale.EventStudy = lfe::felm(emp ~ rtESV13 + rtESV14 + rtESV15 + rtESV16 + rtESV17 +
rtESV18 + rtESV19 + rtESV110 + rtESV111 + # End Pre-periods
rtESV113 + rtESV114 + rtESV115 + rtESV116 + rtESV117 +
rtESV118 + rtESV119 + rtESV120 + rtESV121 + rtESV122 +
rtESV123 + rtESV124 + rtESV125 + rtESV126 + rtESV127 +
rtESV128 + rtESV129 + rtESV130 + rtESV131 + rtESV132 +
rtESV133 + rtESV134 + rtESV135 + # End post-periods
yearsfcor + yearsflr + aveitc + fscontrol + asian + black + hispanic + other |
factor(PUS_SURVEY_YEAR)*factor(BIRTHYEAR) + factor(PUS_SURVEY_YEAR) + factor(BIRTHSTATE) | 0 | BIRTHSTATE,
data = LWdata_RawData,
weights = LWdata_RawData$nobs)
# Extract coefficients of regression associated with event study coefficients
coefIndex = which(grepl(x = dimnames(EmploymentFemale.EventStudy$coefficients)[[1]],
pattern = "rtESV"))
betahat = EmploymentFemale.EventStudy$beta[coefIndex, ]
# Extract estimated variance-covariance matrix of event study coefficients
sigma = EmploymentFemale.EventStudy$clustervcv[coefIndex, coefIndex]
# Construct vector of event times and the scalar reference period
timeVec = c(seq(from = -11, to = -3, by = 1), seq(from = -1, to = 21, by = 1))
referencePeriod = -2
postPeriodIndices = which(timeVec > -2)
prePeriodIndices = which(timeVec < -2)
# Construct standard errors associated with event study coefficients
stdErrors = summary(EmploymentFemale.EventStudy)$coefficients[coefIndex,2]
# Create list containing objects produced by the event study
LWdata_EventStudy = list(
betahat = betahat,
sigma = sigma,
timeVec = timeVec,
referencePeriod = referencePeriod,
prePeriodIndices = prePeriodIndices,
postPeriodIndices = postPeriodIndices,
stdErrors = stdErrors
)
# Load in LWdata_RawData.dta
LWdata_RawData = haven::read_dta(system.file("extdata", "LWdata_RawData.dta", package = "HonestDiD"))
# Estimate event study using lfe package
EmploymentFemale.EventStudy = lfe::felm(emp ~ rtESV13 + rtESV14 + rtESV15 + rtESV16 + rtESV17 +
rtESV18 + rtESV19 + rtESV110 + rtESV111 + # End Pre-periods
rtESV113 + rtESV114 + rtESV115 + rtESV116 + rtESV117 +
rtESV118 + rtESV119 + rtESV120 + rtESV121 + rtESV122 +
rtESV123 + rtESV124 + rtESV125 + rtESV126 + rtESV127 +
rtESV128 + rtESV129 + rtESV130 + rtESV131 + rtESV132 +
rtESV133 + rtESV134 + rtESV135 + # End post-periods
yearsfcor + yearsflr + aveitc + fscontrol + asian + black + hispanic + other |
factor(PUS_SURVEY_YEAR)*factor(BIRTHYEAR) + factor(PUS_SURVEY_YEAR) + factor(BIRTHSTATE) | 0 | BIRTHSTATE,
data = LWdata_RawData,
weights = LWdata_RawData$nobs)
# Extract coefficients of regression associated with event study coefficients
coefIndex = which(grepl(x = dimnames(EmploymentFemale.EventStudy$coefficients)[[1]],
pattern = "rtESV"))
betahat = EmploymentFemale.EventStudy$beta[coefIndex, ]
# Extract estimated variance-covariance matrix of event study coefficients
sigma = EmploymentFemale.EventStudy$clustervcv[coefIndex, coefIndex]
# Construct vector of event times and the scalar reference period
timeVec = c(seq(from = -11, to = -3, by = 1), seq(from = -1, to = 21, by = 1))
referencePeriod = -2
postPeriodIndices = which(timeVec > -2)
prePeriodIndices = which(timeVec < -2)
# Construct standard errors associated with event study coefficients
stdErrors = summary(EmploymentFemale.EventStudy)$coefficients[coefIndex,2]
# Create list containing objects produced by the event study
LWdata_EventStudy = list(
betahat = betahat,
sigma = sigma,
timeVec = timeVec,
referencePeriod = referencePeriod,
prePeriodIndices = prePeriodIndices,
postPeriodIndices = postPeriodIndices,
stdErrors = stdErrors
)
# Load in HonestDiD package after installation
library(HonestDiD)
# Load in HonestDiD package after installation
library(HonestDiD)
detach(HonestDiD)
detach("package:HonestDiD", unload = TRUE)
# Load in HonestDiD package after installation
library(HonestDiD)
# Load in HonestDiD package after installation
library(HonestDiD)
# Load in HonestDiD package after installation
library(HonestDiD)
LWdata_EventStudy
DeltaSD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices))
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
DeltaSD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices))
DeltaSD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSD",
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices))
View(DeltaSD_RobustResults)
library(HonestDiD)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
# Construct dataframe with OLS confidence interval for theta
OLSresults = constructOLSCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSD",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
data('LWdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
numPrePeriods = length(LWdata$prePeriodIndices)
data('LWdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices)
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices)
# Construct robust confidence intervals
DeltaSD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSD",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
head(DeltaSD_RobustResults)
head(Delt)
head(DeltaSD_RobustResults)
# Construct dataframe with OLS confidence interval for theta
OLSresults = constructOLSCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSD",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
# Construct sensitivity plot
DeltaSD_SensitivityPlot = createSensitivityPlot(robustResults = DeltaSD_RobustResults,
OLSresults = OLSresults)
DeltaSD_SensitivityPlot
# Construct robust confidence intervals for Delta^{SD}(M)
DeltaSDD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSDM", monotonicityDirection = "decreasing",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
# Construct robust confidence intervals for Delta^{SD}(M)
DeltaSDD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSDM", monotonicityDirection = "decreasing",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
data('LWdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices)
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices)
# Construct robust confidence intervals for Delta^{SD}(M)
DeltaSD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSD",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
head(DeltaSD_RobustResults)
# Construct dataframe with OLS confidence interval for theta
OLSresults = constructOLSCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSD",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
# Construct sensitivity plot
DeltaSD_SensitivityPlot = createSensitivityPlot(robustResults = DeltaSD_RobustResults,
OLSresults = OLSresults)
DeltaSD_SensitivityPlot
# Construct robust confidence intervals for Delta^{SD}(M)
DeltaSDD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSDM", monotonicityDirection = "decreasing",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
# Construct robust confidence intervals for Delta^{SD}(M)
DeltaSDD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSDM", monotonicityDirection = "decreasing",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
temp = computeConditionalCI_DeltaSDM(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec, alpha = alpha,
monotonicityDirection = monotonicityDirection,
hybrid_flag = "FLCI", hybrid_kappa = NULL)
betahat
Q
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
# Construct robust confidence intervals for Delta^{SD}(M)
DeltaSDD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSDM", monotonicityDirection = "decreasing",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
temp = computeConditionalCI_DeltaSDM(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec, alpha = alpha, M = Mvec[m],
monotonicityDirection = monotonicityDirection,
hybrid_flag = "FLCI", hybrid_kappa = NULL)
temp = computeConditionalCI_DeltaSDM(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec, alpha = alpha, M = Mvec[m],
monotonicityDirection = monotonicityDirection,
hybrid_flag = "FLCI")
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
# Construct robust confidence intervals for Delta^{SD}(M)
DeltaSDD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSDM", monotonicityDirection = "decreasing",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
temp = computeConditionalCI_DeltaSDM(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec, alpha = alpha, M = Mvec[m],
monotonicityDirection = monotonicityDirection,
hybrid_flag = "FLCI")
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
# Construct robust confidence intervals for Delta^{SD}(M)
DeltaSDD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSDM", monotonicityDirection = "decreasing",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
temp = computeConditionalCI_DeltaSDM(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec, alpha = alpha, M = Mvec[m],
monotonicityDirection = monotonicityDirection,
hybrid_flag = "FLCI")
head(DeltaSDD_RobustResults)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
# Load in HonestDiD package after installation
library(HonestDiD)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
# Construct robust confidence intervals for Delta^{SD}(M)
DeltaSD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSD",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
data('LWdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices)
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices)
# Construct robust confidence intervals for Delta^{SD}(M)
DeltaSD_RobustResults = constructRobustCI(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
Delta = "DeltaSD",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods)
head(DeltaSD_RobustResults)
library(HonestDiD)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('HonestDiD')
data('LWdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices)
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices)
#Create l_vec corresponding with 15 years of exposure
#Reference is -2 years of exposure, so want effect 17 pds later
l_vec = basisVector(15 - (-2), numPostPeriods)
# Construct robust confidence intervals for Delta^{SD}(M) for 15 years of exposure
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
head(DeltaSD_RobustResults)
# Construct dataframe with OLS confidence interval for theta
OriginalResults = constructOriginalCS(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec )
library(HonestDiD)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
data('LWdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices)
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices)
#Create l_vec corresponding with 15 years of exposure
#Reference is -2 years of exposure, so want effect 17 pds later
l_vec = basisVector(15 - (-2), numPostPeriods)
# Construct robust confidence intervals for Delta^{SD}(M) for 15 years of exposure
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
head(DeltaSD_RobustResults)
# Construct dataframe with OLS confidence interval for theta
OriginalResults = constructOriginalCS(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec )
# Construct sensitivity plot
DeltaSD_SensitivityPlot = createSensitivityPlot(robustResults = DeltaSD_RobustResults,
OriginalResults = OriginalResults)
# Construct dataframe with OLS confidence interval for theta
OriginalResults = constructOriginalCS(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec )
# Construct sensitivity plot
DeltaSD_SensitivityPlot = createSensitivityPlot(robustResults = DeltaSD_RobustResults,
originalResults = OriginalResults)
DeltaSD_SensitivityPlot
# Construct robust confidence intervals for Delta^{SD}(M)
DeltaSDD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
monotonicityDirection = "decreasing",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
# Construct sensitivity plot
DeltaSDD_SensitivityPlot = createSensitivityPlot(robustResults = DeltaSDD_RobustResults,
OLSresults = OLSresults)
# Construct robust confidence intervals for Delta^{SD}(M)
DeltaSDD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
monotonicityDirection = "decreasing",
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
# Construct sensitivity plot
DeltaSDD_SensitivityPlot = createSensitivityPlot(robustResults = DeltaSDD_RobustResults,
originalResults = OriginalResults)
DeltaSDD_SensitivityPlot
vignette('HonestDiD')
vignette('HonestDiD_Example')
?vignette
vignette('HonestDiD_Example', package = "HonestDiD")
devtools::build_manual()
lowerBound_M = DeltaSD_lowerBound_Mpre(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods)
library('HonestDiD')
lowerBound_M = DeltaSD_lowerBound_Mpre(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods)
library(HonestDiD)
