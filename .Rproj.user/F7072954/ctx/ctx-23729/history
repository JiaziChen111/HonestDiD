l_vec = l_vec, numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods)
# If direction is negative, flip the signs and the upper and lower bounds
if(biasDirection == "negative"){
new.lb <- - IDset$id.ub
new.ub <- - IDset$id.lb
IDset$id.lb <- new.lb
IDset$id.ub <- new.ub
}
sdTheta <- sqrt(t(l_vec) %*% sigma[(numPrePeriods+1):(numPrePeriods+numPostPeriods), (numPrePeriods+1):(numPrePeriods+numPostPeriods)] %*% l_vec)
if (is.na(grid.ub)) {
grid.ub = IDset$id.ub + 20*sdTheta
}
if (is.na(grid.lb)) {
grid.lb = IDset$id.lb - 20*sdTheta
}
}
# Compute ARP CI for l'beta using Delta^SD
CI = .ARP_computeCI(betahat = betahat, sigma = sigma, numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods, A = A_SDB, d = d_SDB,
l_vec = l_vec, alpha = alpha,
hybrid_flag = hybrid_flag, hybrid_list = hybrid_list,
returnLength = returnLength,
grid.lb = grid.lb, grid.ub = grid.ub,
gridPoints = gridPoints, rowsForARP = rowsForARP)
# Returns CI
return(CI)
}
# DELTA^{SDM}(M) FUNCTIONS --------------------------------------------
# In this section, we implement helper functions to place testing with
# Delta^{SDM}(M) into the form needed to use the ARP functions.
.create_A_M <- function(numPrePeriods, numPostPeriods,
monotonicityDirection = "increasing", postPeriodMomentsOnly = F){
#This function creates a matrix so that A \delta <= 0 implies delta is increasing/decreasing depending on what direction is specified
A_M = matrix(0, nrow = numPrePeriods+numPostPeriods, ncol=numPrePeriods+numPostPeriods)
for(r in 1:(numPrePeriods-1)){
A_M[r, r:(r+1)] <- c(1,-1)
}
A_M[numPrePeriods, numPrePeriods] <- 1
if(numPostPeriods > 0){
A_M[numPrePeriods + 1, numPrePeriods + 1] <- -1
for (r in (numPrePeriods + 2):(numPrePeriods+numPostPeriods)) {
A_M[r, (r-1):r] <- c(1,-1)
}
}
# If postPeriodMomentsOnly == T, exclude moments that only involve pre-periods
if(postPeriodMomentsOnly){
postPeriodIndices <- (numPrePeriods +1):NCOL(A_M)
prePeriodOnlyRows <- which( rowSums( A_I[ , postPeriodIndices] != 0 ) == 0 )
A_M <- A_M[-prePeriodOnlyRows , ]
}
if (monotonicityDirection == "decreasing") {
A_M <- -A_M
} else if(monotonicityDirection != "increasing") {
stop("direction must be 'increasing' or 'decreasing'")
}
return(A_M)
}
.create_A_SDM <- function(numPrePeriods, numPostPeriods,
monotonicityDirection = "increasing", postPeriodMomentsOnly = F) {
# This function creates a matrix for the linear constraints that \delta \in Delta^SDI(M).
# It implements this using the general characterization of A.
#
# Inputs:
#   numPrePeriods = number of pre-periods. This is an element of resultsObjects.
#   numPostPeriods = number of post-periods. This is an element of resultsObjects.
A_M <- .create_A_M(numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
monotonicityDirection = monotonicityDirection, postPeriodMomentsOnly = postPeriodMomentsOnly)
A_SD = .create_A_SD(numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods, postPeriodMomentsOnly =  postPeriodMomentsOnly)
A = rbind(A_SD, A_M)
return(A)
}
.create_d_SDM <- function(numPrePeriods, numPostPeriods, M, postPeriodMomentsOnly = F) {
# This function creates a vector for the linear constraints that \delta \in Delta^SDI(M).
# It implements this using the general characterization of d.
#
# Inputs:
#   numPrePeriods  = number of pre-periods. This is an element of resultsObjects.
#   numPostPeriods = number of post-periods. This is an element of resultsObjects.
#   M              = smoothness parameter of Delta^SD(M).
d_SD = .create_d_SD(numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods, M = M, postPeriodMomentsOnly = postPeriodMomentsOnly)
d_I = rep(0, ifelse(postPeriodMomentsOnly, numPostPeriods, numPrePeriods+numPostPeriods) )
d = c(d_SD, d_I)
return(d)
}
.compute_IDset_DeltaSDM <- function(M, trueBeta, l_vec, numPrePeriods,
numPostPeriods, monotonicityDirection) {
# Create objective function: Wish to min/max l'delta_post
fDelta = c(rep(0, numPrePeriods), l_vec)
# Create A, d that define Delta^SDM(M)
A_SDM = .create_A_SDM(numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods, monotonicityDirection = monotonicityDirection)
d_SDM = .create_d_SDM(numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods, M = M)
dir_SDM = rep("<=", NROW(A_SDM))
# Create equality constraint that delta_pre = beta_pre
prePeriodEqualityMat = cbind(diag(numPrePeriods),
matrix(data = 0, nrow = numPrePeriods, ncol = numPostPeriods))
A_SDM = rbind(A_SDM, prePeriodEqualityMat)
d_SDM = c(d_SDM,
trueBeta[1:numPrePeriods])
dir_SDM = c(dir_SDM,
rep("==", NROW(prePeriodEqualityMat)))
bounds = list(lower = list(ind = 1:(numPrePeriods + numPostPeriods),
val = rep(-Inf, numPrePeriods+numPostPeriods)),
upper = list(ind = 1:(numPrePeriods + numPostPeriods),
val = rep(Inf, numPrePeriods+numPostPeriods)))
# Create and solve for max
max.results = Rglpk::Rglpk_solve_LP(obj = fDelta,
max = TRUE,
mat = A_SDM,
dir = dir_SDM,
rhs = d_SDM,
bounds = bounds)
# Create and solve for min
min.results = Rglpk::Rglpk_solve_LP(obj = fDelta,
max = FALSE,
mat = A_SDM,
dir = dir_SDM,
rhs = d_SDM,
bounds = bounds)
if (max.results$status != 0 & min.results$status != 0) {
warning("Solver did not find an optimum")
id.ub = (t(l_vec) %*% trueBeta[(numPrePeriods+1):(numPrePeriods+numPostPeriods)])
id.lb = (t(l_vec) %*% trueBeta[(numPrePeriods+1):(numPrePeriods+numPostPeriods)])
}
else {
# Construct upper/lower bound of identified set
id.ub = (t(l_vec) %*% trueBeta[(numPrePeriods+1):(numPrePeriods+numPostPeriods)]) - min.results$optimum
id.lb = (t(l_vec) %*% trueBeta[(numPrePeriods+1):(numPrePeriods+numPostPeriods)]) - max.results$optimum
}
# Return identified set
return(tibble(
id.lb = id.lb,
id.ub = id.ub))
}
computeConditionalCI_SDM <- function(betahat, sigma, numPrePeriods, numPostPeriods, M = 0,
l_vec = .basisVector(index = 1, size = numPostPeriods),
alpha = 0.05, monotonicityDirection = "increasing",
hybrid_flag = "ARP", hybrid_kappa = NULL,
returnLength = F, postPeriodMomentsOnly = F,
gridPoints=10^3,
grid.lb = NA,
grid.ub = NA) {
# This function computes the ARP CI that includes nuisance parameters
# for Delta^{SDI}(M). This functions uses ARP_computeCI for all
# of its computations.
#
# Inputs:
#   betahat        = vector of estimated event study coefficients
#   sigma          = covariance matrix of estimated event study coefficients
#   numPrePeriods  = number of pre-periods
#   numPostPeriods = number of post-periods
#   l_vec          = vector that defines parameter of interest theta
#   M              = tuning parameter for Delta^SD(M), default M = 0.
#   alpha          = desired size of CI, default alpha = 0.05
#   hybrid_flag    = flag for hybrid default = "ARP".
#   hybrid_kappa   = desired size of first-stage least favorable test, default = NULL
#   returnLength   = returns length of CI only. Otherwise, returns matrix with grid in col 1 and test result in col 2.
#   postPeriodMomentsOnly = exclude moments that relate only to the pre-period coeffs
#   gridPoints     = number of gridpoints to test over, default = 1000
#
#  Outputs:
#   data_frame containing upper and lower bounds of CI.
# Construct A_SDM, d_SDM
A_SDM = .create_A_SDM(numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
monotonicityDirection = monotonicityDirection, postPeriodMomentsOnly = F)
d_SDM = .create_d_SDM(numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods, M = M, postPeriodMomentsOnly = F)
if (postPeriodMomentsOnly) {
postPeriodIndices <- (numPrePeriods +1):NCOL(A_SDM)
postPeriodRows <- which( rowSums( A_SDM[ , postPeriodIndices] != 0 ) > 0 )
rowsForARP <- postPeriodRows
} else {
rowsForARP <- 1:NROW(A_SDM)
}
# Create hybrid_list object
hybrid_list = list(hybrid_kappa = hybrid_kappa)
# HYBRID: If hybrid with FLCI, compute FLCI
if (hybrid_flag == "FLCI") {
flci = findOptimalFLCI(sigma = sigma, M = M, numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods, l_vec = l_vec, alpha = hybrid_kappa)
# Add objects to hybrid_list: flci l vector
hybrid_list$flci_l = flci$optimalVec
# Add vbar to flci l vector
vbar = Variable(NROW(A_SDM))
obj <- Minimize( t(flci$optimalVec) %*% flci$optimalVec -
2 * t(flci$optimalVec) %*% t(A_SDM) %*% vbar + quad_form(x = vbar, P = A_SDM %*% t(A_SDM)) )
prob = Problem(obj)
result = solve(prob)
hybrid_list$vbar = result$getValue(vbar)
# Add objects to hybrid_list: flci half-length
hybrid_list$flci_halflength = flci$optimalHalfLength
# compute FLCI ub and FLCI lb
grid.ub = (t(hybrid_list$flci_l) %*% betahat) + flci$optimalHalfLength
grid.lb = (t(hybrid_list$flci_l) %*% betahat) - flci$optimalHalfLength
} else {
# Compute ID set
IDset = .compute_IDset_DeltaSDM(M = M, trueBeta = rep(0, numPrePeriods + numPostPeriods),
monotonicityDirection = monotonicityDirection, l_vec = l_vec,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods)
sdTheta <- sqrt(t(l_vec) %*% sigma[(numPrePeriods+1):(numPrePeriods+numPostPeriods), (numPrePeriods+1):(numPrePeriods+numPostPeriods)] %*% l_vec)
if (is.na(grid.ub)) {
grid.ub = IDset$id.ub + 20*sdTheta
}
if (is.na(grid.lb)) {
grid.lb = IDset$id.lb - 20*sdTheta
}
}
# Compute ARP CI for l'beta using Delta^SDI
CI = .ARP_computeCI(betahat = betahat, sigma = sigma, numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods, A = A_SDM, d = d_SDM,
l_vec = l_vec, alpha = alpha,
hybrid_flag = hybrid_flag, hybrid_list = hybrid_list,
returnLength = returnLength,
grid.lb = grid.lb, grid.ub = grid.ub,
gridPoints = gridPoints, rowsForARP = rowsForARP)
# Returns CI
return(CI)
}
# Delta^{RMI} functions -----------------------------------------------
.create_A_RMI <- function(numPrePeriods, numPostPeriods,
Mbar, monotonicityDirection, postPeriodMomentsOnly = F) {
# This function creates a matrix for the linear constraints that \delta \in \Delta^{RM}(M) \intersect
# with delta increasing or decreasing.
#
# Inputs:
#   numPrePeriods = number of pre-periods.
#   numPostPeriods = number of post-periods
#   direction = "increasing" or "decreasing"
#   postPeriodMomentsOnly = whether to exclude moments relating only to pre-period, which don't affect the ID set.
#   Mbar = parameter that governs Delta^RM set.
# Create matrix for the increasing/decreasing moments
A_I = .create_A_M(numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
monotonicityDirection = "increasing", postPeriodMomentsOnly = postPeriodMomentsOnly)
# Create matrix for the RM moments
A_RMI_pos = matrix(0, nrow = numPrePeriods + numPostPeriods - 1, ncol = numPrePeriods + numPostPeriods + 1)
for (r in 1:(numPrePeriods + numPostPeriods - 1)) {
A_RMI_pos[r, r:(r+2)] = c(Mbar, -Mbar + 1, -1)
}
A_RMI_pos = A_RMI_pos[, -(numPrePeriods+1)]
A_RMI_neg = matrix(0, nrow = numPrePeriods + numPostPeriods - 1, ncol = numPrePeriods + numPostPeriods + 1)
for (r in 1:(numPrePeriods + numPostPeriods - 1)) {
A_RMI_neg[r, r:(r+2)] = c(Mbar, -Mbar-1, 1)
}
A_RMI_neg = A_RMI_neg[, -(numPrePeriods+1)]
A_RMI_tilde = rbind(A_RMI_pos, A_RMI_neg)
# Impose postPeriodMomentsOnly on A_RMI
if (postPeriodMomentsOnly) {
postPeriodIndices <- (numPrePeriods +1):NCOL(A_RMI_tilde)
prePeriodOnlyRows <- which( rowSums( A_RMI_tilde[ , postPeriodIndices] != 0 ) == 0 )
A_RMI_tilde <- A_RMI_tilde[-prePeriodOnlyRows , ]
}
# Construct A_RMI matrix
A_RMI = rbind(A_RMI_tilde, A_I)
return(A_RMI)
}
.create_d_RMI <- function(numPrePeriods, numPostPeriods, postPeriodMomentsOnly = F) {
# This function creates a vector for the linear constraints that \delta \in Delta^RM(M) \intersect increasing/decreasing.
# It implements this using the general characterization of d.
#
# Inputs:
#   numPrePeriods  = number of pre-periods. This is an element of resultsObjects.
#   numPostPeriods = number of post-periods. This is an element of resultsObjects.
d_RMI = rep(0, ifelse(postPeriodMomentsOnly, postPeriods, 2*(numPrePeriods + numPostPeriods-1)))
d_I = rep(0, ifelse(postPeriodMomentsOnly, numPostPeriods, numPrePeriods+numPostPeriods))
d = c(d_RMI, d_I)
return(d)
}
.compute_IDset_DeltaRMI <- function(Mbar, trueBeta, l_vec, numPrePeriods, numPostPeriods) {
# Create objective function: Wish to min/max l'delta_post
fDelta = c(rep(0, numPrePeriods), l_vec)
# Create A, d that define Delta^SDPB(M)
A_RMI = .create_A_RMI(numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods, Mbar = Mbar)
d_RMI = .create_d_RMI(numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods)
dir_RMI = rep("<=", NROW(A_RMI))
# Create equality constraint that delta_pre = beta_pre
prePeriodEqualityMat = cbind(diag(numPrePeriods),
matrix(data = 0, nrow = numPrePeriods, ncol = numPostPeriods))
A_RMI = rbind(A_RMI, prePeriodEqualityMat)
d_RMI = c(d_RMI,
trueBeta[1:numPrePeriods])
dir_RMI = c(dir_RMI,
rep("==", NROW(prePeriodEqualityMat)))
bounds = list(lower = list(ind = 1:(numPrePeriods + numPostPeriods), val = rep(-Inf, numPrePeriods+numPostPeriods)),
upper = list(ind = 1:(numPrePeriods + numPostPeriods), val = rep(Inf, numPrePeriods+numPostPeriods)))
# Create and solve for max
max.results = Rglpk::Rglpk_solve_LP(obj = fDelta,
max = TRUE,
mat = A_RMI,
dir = dir_RMI,
rhs = d_RMI,
bounds = bounds)
# Create and solve for min
min.results = Rglpk::Rglpk_solve_LP(obj = fDelta,
max = FALSE,
mat = A_RMI,
dir = dir_RMI,
rhs = d_RMI,
bounds = bounds)
if (max.results$status != 0 & min.results$status != 0) {
warning("Solver did not find an optimum")
id.ub = (t(l_vec) %*% trueBeta[(numPrePeriods+1):(numPrePeriods+numPostPeriods)])
id.lb = (t(l_vec) %*% trueBeta[(numPrePeriods+1):(numPrePeriods+numPostPeriods)])
}
else {
# Construct upper/lower bound of identified set
id.ub = (t(l_vec) %*% trueBeta[(numPrePeriods+1):(numPrePeriods+numPostPeriods)]) - min.results$optimum
id.lb = (t(l_vec) %*% trueBeta[(numPrePeriods+1):(numPrePeriods+numPostPeriods)]) - max.results$optimum
}
# Return identified set
return(tibble(
id.lb = id.lb,
id.ub = id.ub))
}
computeConditionalCI_RMI <- function(betahat, sigma, numPrePeriods, numPostPeriods, Mbar = 0,
l_vec = .basisVector(index = 1, size = numPostPeriods),
alpha = 0.05,
hybrid_flag = "ARP", hybrid_kappa = NULL,
returnLength = F, postPeriodMomentsOnly = F,
gridPoints=10^3,
grid.lb = NA, grid.ub = NA) {
# This function computes the ARP CI that includes nuisance parameters
# for Delta^{RM}(Mbar). This functions uses ARP_computeCI for all
# of its computations.
#
# Inputs:
#   betahat        = vector of estimated event study coefficients
#   sigma          = covariance matrix of estimated event study coefficients
#   numPrePeriods  = number of pre-periods
#   numPostPeriods = number of post-periods
#   l_vec          = vector that defines parameter of interest theta
#   Mbar           = tuning parameter for Delta^RM(Mbar), default Mbar = 0.
#   alpha          = desired size of CI, default alpha = 0.05
#   hybrid_flag    = flag for hybrid default = "ARP".
#   hybrid_kappa   = desired size of first-stage least favorable test, default = NULL
#   returnLength   = returns length of CI only. Otherwise, returns matrix with grid in col 1 and test result in col 2.
#   postPeriodMomentsOnly = exclude moments that relate only to the pre-period coeffs
#   gridPoints     = number of gridpoints to test over, default = 1000
#
#  Outputs:
#   data_frame containing upper and lower bounds of CI.
# Construct A_SDI, d_SDI
A_RMI = .create_A_RMI(numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods, Mbar = Mbar, postPeriodMomentsOnly = F)
d_RMI = .create_d_RMI(numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods, postPeriodMomentsOnly = F)
if(postPeriodMomentsOnly){
postPeriodIndices <- (numPrePeriods +1):NCOL(A_RMI)
postPeriodRows <- which( rowSums( A_RMI[ , postPeriodIndices] != 0 ) > 0 )
rowsForARP <- postPeriodRows
}else{
rowsForARP <- 1:NROW(A_RMI)
}
# Create hybrid_list object
hybrid_list = list(hybrid_kappa = hybrid_kappa)
# HYBRID: If hybrid with FLCI, compute FLCI
if (hybrid_flag == "FLCI") {
stop("The FLCI hybrid is not an option for Delta^{RMI}!")
} else {
# Compute ID set
IDset = .compute_IDset_DeltaRMI(Mbar = Mbar, trueBeta = rep(0, numPrePeriods + numPostPeriods), l_vec = l_vec,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods)
sdTheta <- sqrt(t(l_vec) %*% sigma[(numPrePeriods+1):(numPrePeriods+numPostPeriods), (numPrePeriods+1):(numPrePeriods+numPostPeriods)] %*% l_vec)
if (is.na(grid.ub)) {
grid.ub = IDset$id.ub + 20*sdTheta
}
if (is.na(grid.lb)) {
grid.lb = IDset$id.lb - 20*sdTheta
}
}
# Compute ARP CI for l'beta using Delta^SDI
CI = .ARP_computeCI(betahat = betahat, sigma = sigma, numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods, A = A_RMI, d = d_RMI,
l_vec = l_vec, alpha = alpha,
hybrid_flag = hybrid_flag, hybrid_list = hybrid_list,
returnLength = returnLength,
grid.lb = grid.lb, grid.ub = grid.ub,
gridPoints = gridPoints, rowsForARP = rowsForARP)
# Returns CI
return(CI)
}
testingData <- readRDS("~/Dropbox/HonestParallelTrends/Temp/Benzarti-Carloni-Results/resultsObject-benzarti-carloni-profits.rds")
numPrePeriods = length(testingData$prePeriodIndices)
numPostPeriods = length(testingData$postPeriodIndices)
l_vec_avg = rep(1, numPostPeriods)/numPostPeriods
DeltaSD_PostP1_Conditional = computeConditionalCI_SD(betahat = testingData$beta, sigma = testingData$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
M = 0, alpha = 0.05, hybrid_flag = "ARP")
DeltaSD_PostP1_LFConditional = computeConditionalCI_SD(betahat = testingData$beta, sigma = testingData$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
M = 0, alpha = 0.05, hybrid_flag = "LF", hybrid_kappa = 0.05/10)
DeltaSD_PostP1_FLCIConditional = computeConditionalCI_SD(betahat = testingData$beta, sigma = testingData$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
M = 0, alpha = 0.05, hybrid_flag = "FLCI", hybrid_kappa = 0.05/10)
computeConditionalCI_SD <- function(betahat, sigma, numPrePeriods, numPostPeriods,
l_vec = .basisVector(index = 1, size = numPostPeriods), M = 0,
alpha = 0.05, hybrid_flag = "ARP", hybrid_kappa = NULL,
returnLength = F, postPeriodMomentsOnly = F,
gridPoints =10^3, grid.midPoint = NA, grid.ub = NA, grid.lb = NA) {
# This function computes the ARP CI that includes nuisance parameters
# for Delta^{SD}(M). This functions uses ARP_computeCI for all
# of its computations.
#
# Inputs:
#   betahat             = vector of estimated event study coefficients
#   sigma               = covariance matrix of estimated event study coefficients
#   numPrePeriods       = number of pre-periods
#   numPostPeriods      = number of post-periods
#   l_vec               = vector that defines parameter of interest
#   M                   = tuning parameter for Delta^SD(M), default M = 0.
#   alpha               = desired size of CI, default alpha = 0.05
#   hybrid_flag         = flag for hybrid, default = "ARP"
#   hybrid_kappa        = desired size of first-stage hybrid test, default = NULL
#   returnLength        = returns length of CI only. Otherwise, returns matrix with grid in col 1 and test result in col 2.
#   numGridPoints       = number of gridpoints to test over, default = 1000
#   postPeriodMomentsOnly = exclude moments for delta^SD that only include pre-period coefs
#
#  Outputs:
#   data_frame containing upper and lower bounds of CI.
# Construct A_SD, d_SD
A_SD = .create_A_SD(numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods, postPeriodMomentsOnly = F)
d_SD = .create_d_SD(numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods, M = M, postPeriodMomentsOnly = F)
if(postPeriodMomentsOnly){
postPeriodIndices <- (numPrePeriods +1):NCOL(A_SD)
postPeriodRows <- which( rowSums( A_SD[ , postPeriodIndices] != 0 ) > 0 )
rowsForARP <- postPeriodRows
}else{
rowsForARP <- 1:NROW(A_SD)
}
# Create hybrid_list object
hybrid_list = list(hybrid_kappa = hybrid_kappa)
# HYBRID: If hybrid, compute FLCI
if (hybrid_flag == "FLCI") {
flci = findOptimalFLCI(sigma = sigma, M = M,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, alpha = hybrid_kappa)
# Add objects to hybrid_list: flci l vector
hybrid_list$flci_l = flci$optimalVec
# Add vbar to flci l vector
vbar = Variable(NROW(A_SD))
obj <- Minimize( t(flci$optimalVec) %*% flci$optimalVec -
2 * t(flci$optimalVec) %*% t(A_SD) %*% vbar + quad_form(x = vbar, P = A_SD %*% t(A_SD)) )
prob = Problem(obj)
result = solve(prob)
hybrid_list$vbar = result$getValue(vbar)
# Add objects to hybrid_list: flci half-length
hybrid_list$flci_halflength = flci$optimalHalfLength
# compute FLCI ub and FLCI lb
if (is.na(grid.ub)){
grid.ub = (t(flci$optimalVec) %*% betahat) + flci$optimalHalfLength
}
if (is.na(grid.lb)){
grid.lb = (t(flci$optimalVec) %*% betahat) - flci$optimalHalfLength
}
} else {
# Compute identified set under parallel trends
IDset = .compute_IDset_DeltaSD(M = M, trueBeta = rep(0, numPrePeriods + numPostPeriods),
l_vec = l_vec, numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods)
sdTheta <- sqrt(t(l_vec) %*% sigma[(numPrePeriods+1):(numPrePeriods+numPostPeriods), (numPrePeriods+1):(numPrePeriods+numPostPeriods)] %*% l_vec)
if(is.na(grid.ub)){
grid.ub = IDset$id.ub + 20*sdTheta
}
if(is.na(grid.lb)){
grid.lb = IDset$id.lb - 20*sdTheta
}
}
# Compute ARP CI for l'beta using Delta^SD
CI = .ARP_computeCI(betahat = betahat, sigma = sigma, numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods, A = A_SD, d = d_SD,
l_vec = l_vec, alpha = alpha,
hybrid_flag = hybrid_flag, hybrid_list = hybrid_list,
returnLength = returnLength,
grid.lb = grid.lb, grid.ub = grid.ub,
gridPoints = gridPoints, rowsForARP = rowsForARP)
# Returns CI
return(CI)
}
DeltaSD_PostP1_FLCIConditional = computeConditionalCI_SD(betahat = testingData$beta, sigma = testingData$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
M = 0, alpha = 0.05, hybrid_flag = "FLCI", hybrid_kappa = 0.05/10)
DeltaSD_PostP1_FLCIConditional
View(DeltaSD_PostP1_LFConditional)
DeltaSD_PostP1_LFConditional$grid[DeltaSD_PostP1_LFConditional$accept == 1]
DeltaSD_PostP1_Conditional$grid[DeltaSD_PostP1_Conditional$accept == 1]
# Load data -----------------------------------------------------------
source("~/Dropbox/HonestParallelTrends/Code/APR-moment-inequality-functions-general-lvec.R")
testingData <- readRDS("~/Dropbox/HonestParallelTrends/Temp/Benzarti-Carloni-Results/resultsObject-benzarti-carloni-profits.rds")
numPrePeriods = length(testingData$prePeriodIndices)
numPostPeriods = length(testingData$postPeriodIndices)
l_vec_avg = rep(1, numPostPeriods)/numPostPeriods
M = 0
library(here)
here()
install.packages('changer')
library(HonestDiD)
library(HonestDiD)
library(HonestDiD)
library(HonestDiD)
library(HonestDiD)
library(HonestDiD)
library(HonestDiD)
library(HonestDiD)
?LWdata
??LWdata
library(HonestDiD)
HonestDiD::LWdata
devtools::install_github("kolesarm/GMMSensitivity")
install.packages('roxygen2')
library(HonestDiD)
HonestDiD::LWData
LWdata
HonestDiD::LWdata
data(LWdata)
data("LWdata.Rdata")
data("LWdata.Rdata", package = "HonestDiD")
ability.cov
