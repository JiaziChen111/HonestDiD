---
output: 
  pdf_document:
    citation_package: natbib
    latex_engine: pdflatex
title: "HonestDiD: Vignette"
author: "Ashesh Rambachan"
date: "`r format(Sys.time(), '%B %d, %Y')`"
geometry: margin=1in
fontfamily: mathpazo
bibliography: bibliography.bib
fontsize: 11pt
vignette: >
  %\VignetteIndexEntry{dfadjust}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include=FALSE, cache = FALSE}
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
                      tidy.opts=list(blank=FALSE, width.cutoff=60))
```

# Description

The `HonestDiD` package implements the methods developed in @RambachanRoth for performing inference in difference-in-differences and event-study designs that is robust to violations of the parallel trends assumption. See @RambachanRoth for methodological details.

We illustrate how the package can be used with an application to @LovenheimWillen.\footnote{See Section 10 of @RambachanRoth for a detailed application of these methods to @LovenheimWillen.} The estimated event study coefficients and variance-covariance matrix for the baseline female estimates on employment in Specification (1) of @LovenheimWillen are included in the package as `LWdata_EventStudy`.\footnote{A description of this data can be obtained from the package's documentation in R using `?LWdata_EventStudy` or `help(LWdata_EventStudy`)} The underlying raw data for this event study is also included in the package.

# Installation

To install the package, use the function `install_github()` from the `devtool` package:
```{r}
# install.packages("devtools") ## if devtools package not installed
# devtools::install_github("asheshrambachan/HonestDiD")
```

# Preliminaries

# Conducting Sensitivity Analysis

## Background: choices of Delta 

## Constructing a sensitivity plot 

## Calibrating $M$

# Additional Features

\newpage

First, load the library and attach the provided dataframe `LWdata`.

```{r, include = FALSE}
library("HonestDiD")
```
```{r}
data('LWdata', package = "HonestDiD")

# Number of pre-periods
numPrePeriods = length(LWdata$prePeriodIndices)
numPostPeriods = length(LWdata$postPeriodIndices)
```

## Fixed-length confidence intervals

The function `findOptimalFLCI` computes the optimal FLCI for $\Delta = \Delta^{SD}(M)$. The user specifies an estimated variance-covariance matrix, the vector $l$ that defines the scalar parameter of interest $\theta = l'\tau$, the value of $M$ and the desired size of the confidence interval $\alpha$. The function returns the vector $v$ that contains the coefficients of the affine estimator at which the FLCI is centered and the half-length of the FLCI $\chi_{1-\alpha}$.

The defaults sets the vector $l$ to equal the first basis vector ($\theta = \tau_1$), the size of the confidence interval to be $\alpha = 0.05$ and $M = 0$. 

The upper and lower bounds of the optimal FLCI are constructed by forming $(v'\hat{\beta} - \chi_{1-\alpha}, v'\hat{\beta} + \chi_{1-\alpha})$. 

```{r, warning = FALSE, message = FALSE}
FLCI = findOptimalFLCI(sigma = LWdata$sigma, 
                       numPrePeriods = numPrePeriods, 
                       numPostPeriods = numPostPeriods)
FLCI_CI = c(t(FLCI$optimalVec) %*% LWdata$betahat - FLCI$optimalHalfLength, 
            t(FLCI$optimalVec) %*% LWdata$betahat + FLCI$optimalHalfLength)
```

## Conditional and hybrid confidence intervals

The functions `computeConditionalCI_SD`, `computeConditionalCI_SDB`, `computeConditionalCI_SDM`, and `computeConditionalCI_RMI` construct the conditional confidence set and hybridized confidence sets for $\Delta = \Delta^{SD}(M), \Delta^{SDB}(M), \Delta^{SDM}(M), \Delta^{RMI}(M)$ respectively. The usage of these functions are similar and see the R documentation for details.

Like `findOptimalFLCI`, these functions set the vector $l$ to equal the first basis vector ($\theta = \tau_1$), the size of the confidence interval to be $\alpha = 0.05$ and $M = 0$ by default. 

For example, the function `computeConditionalCI_SD` computes either the conditional confidence set, the conditional FLCI hybrid confidence set or conditional least favorable confidence set depending on the user's specification. The user may specify which confidence set by modifying the input `hybrid_flag` - the option `ARP` specifies the conditional confidence set, the option `FLCI` specifies the conditional FLCI hybrid confidence set and `LF` specifies the conditional least-favorable confidence set. For `computeConditionalCI_SD`, `computeConditionalCI_SDB`, and `computeConditionalCI_SDM` select the conditional FLCI confidence set by default. Finally, if the user selects a hybrid confidence set (`hybrid_flag = "FLCI"` or `hybrid_flag = "LF"`), then the user must also specify `hybrid_kappa`, which is the size of the first-stage test. By default, the function sets `hybrid_kappa = alpha/10`. 

```{r, warning = FALSE}
# Computes the conditional FLCI hybrid confidence set for Delta^{SD}(M)
conditionalFLCI = computeConditionalCI_DeltaSD(betahat = LWdata$betahat, 
                                               sigma = LWdata$sigma,
                                               numPrePeriods = numPrePeriods, 
                                               numPostPeriods = numPostPeriods,
                                               hybrid_flag = "FLCI")
```

## Constructing bounds on $M$
The functions `DeltaSD_lowerBound_M` and `DeltaSD_upperBound_M` help the user construct bounds on the tuning parameter $M$ based upon the observed pre-period event study coefficients based on the discussion in Section 9 of @RambachanRoth.

`DeltaSD_lowerBound_M` constructs a lower bound for $M$ by constructing a one-sided lower confidence interval on the maximal second difference of the observed event study coefficients in the pre-periods. This confidence interval is constructed by inverting the conditional test developed in @AndrewsRothPakes. See the R documentation for further details.

`DeltaSD_upperBound_M` constructs an upper bound for $M$ by constructing one-sided upper confidence intervals for each second difference of the observed event study coefficients in the pre-periods. The function then reports the maximum across these one-sided upper confidence intervals. See the R documentation for further details.

Both functions require the user to specify the vector of estimated event study coefficients, the variance covariance matrix, the number of pre-periods and the desired size of the one-sided confidence intervals.

```{r}
lowerBound_M = DeltaSD_lowerBound_M(betahat = LWdata$betahat, sigma = LWdata$sigma, 
                                    numPrePeriods = numPrePeriods)
upperBound_M = DeltaSD_upperBound_M(betahat = LWdata$betahat, sigma = LWdata$sigma, 
                                    numPrePeriods = numPrePeriods)
```

## Constructing sensitivity plots

The function `createEventStudyPlot` provides a wrapper function to construct event study plots using `ggplot` from estimated event study coefficients. The user provides the estimated event study coefficients, the estimated standard errors (or variance-covariance matrix), and several inputs related to event time. The function requires the number of pre-periods (`numPrePeriods`) and the number of post-periods (`numPostPeriods`). It requires a vector (`timeVec`) that contains the time periods and a scalar (`referencePeriod`) that specifies the reference period. Finally, the user may specify whether she would like to construct the plot using relative event time, meaning that `timeVec` is normalized such that the reference period is zero. 

```{r, warning = FALSE}
LWeventStudyPlot = createEventStudyPlot(betahat = LWdata$beta, 
                                        stdErrors = LWdata$stdErrors,
                                        numPrePeriods = numPrePeriods, 
                                        numPostPeriods = numPostPeriods,
                                        timeVec = LWdata$timeVec, 
                                        referencePeriod = LWdata$referencePeriod)
LWeventStudyPlot

```

The function `createSensitivityPlot` provides a wrapper function to construct sensitivity plots like those in Section 10 of @RambachanRoth. The user provides two dataframes to this function. Each row of the dataframe `robustResults` is a robust confidence interval computed at a different value of $M$. The dataframe `OLSresults` consists of a single row that contains the OLS estimate of $\theta$ and the usual OLS-based confidence interval for $\hat \theta$. 

We now show how to use the functions in the package to construct the dataframe `robustResults`. We illustrate this using the FLCI and $\theta = \tau_1$.

```{r, warning = FALSE}
# Specify vector of M values
mVec = seq(from = 0, to = 0.1, length = 5)

# Loop over M values and construct the robust confidence set at each value
library(foreach)
robustResults = foreach(m = 1:length(mVec), .combine = 'rbind') %do% {
  FLCI = findOptimalFLCI(sigma = LWdata$sigma, M = mVec[m],
                         numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods)
  tibble(lb = t(FLCI$optimalVec) %*% LWdata$betahat - FLCI$optimalHalfLength,
         ub = t(FLCI$optimalVec) %*% LWdata$betahat + FLCI$optimalHalfLength,
         method = "FLCI",
         M = mVec[m])
}

# Construct OLS dataframe
OLSresults = tibble(lb = LWdata$betahat[numPrePeriods+1] -
                      qnorm(0.95)*LWdata$stdErrors[numPrePeriods+1], 
                    ub = LWdata$betahat[numPrePeriods+1] + 
                      qnorm(0.95)*LWdata$stdErrors[numPrePeriods+1],
                    method = "OLS", 
                    M = 0)
```
We now show how to use `createSensitivityPlot` to construct the sensitivity plot using the constructed robust confidence sets. 
```{r, warning = FALSE}
sensitivityPlot = createSensitivityPlot(robustResults = robustResults, 
                                        OLSresults = OLSresults)
sensitivityPlot
```

\newpage
# References
